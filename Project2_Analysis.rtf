{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red71\green137\blue205;\red255\green255\blue255;\red193\green193\blue193;
\red212\green213\blue154;\red141\green212\blue254;\red202\green202\blue202;\red67\green192\blue160;\red194\green126\blue101;
\red167\green197\blue151;\red183\green111\blue179;\red205\green173\blue106;\red193\green193\blue193;}
{\*\expandedcolortbl;;\cssrgb\c33936\c61427\c84130;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c80088\c80088\c79988;
\cssrgb\c86261\c86245\c66529;\cssrgb\c61361\c86489\c99746;\cssrgb\c83229\c83229\c83125;\cssrgb\c30610\c78876\c69022;\cssrgb\c80778\c56830\c46925;
\cssrgb\c71008\c80807\c65805;\cssrgb\c77331\c52624\c75301;\cssrgb\c84255\c72854\c48827;\cssrgb\c80176\c80176\c79976;}
\margl1440\margr1440\vieww23220\viewh13040\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 def\cf4 \strokec4  \cf5 \strokec5 time_to_minutes\cf4 \strokec4 (\cf6 \strokec6 time_str\cf4 \strokec4 ):\
    h, m \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 map\cf4 \strokec4 (\cf8 \strokec8 int\cf4 \strokec4 , time_str.split(\cf9 \strokec9 ':'\cf4 \strokec4 ))                                \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
    \cf11 \strokec11 return\cf4 \strokec4  h \cf7 \strokec7 *\cf4 \strokec4  \cf10 \strokec10 60\cf4 \strokec4  \cf7 \strokec7 +\cf4 \strokec4  m                                                   \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
\
\cf2 \strokec2 def\cf4 \strokec4  \cf5 \strokec5 minutes_to_time\cf4 \strokec4 (\cf6 \strokec6 minutes\cf4 \strokec4 ):\
    \cf11 \strokec11 return\cf4 \strokec4  \cf2 \strokec2 f\cf9 \strokec9 "\cf2 \strokec2 \{\cf4 \strokec4 minutes \cf7 \strokec7 //\cf4 \strokec4  \cf10 \strokec10 60\cf2 \strokec2 :02\}\cf9 \strokec9 :\cf2 \strokec2 \{\cf4 \strokec4 minutes \cf7 \strokec7 %\cf4 \strokec4  \cf10 \strokec10 60\cf2 \strokec2 :02\}\cf9 \strokec9 "\cf4 \strokec4                       \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
\
\cf2 \strokec2 def\cf4 \strokec4  \cf5 \strokec5 calculate_free_intervals\cf4 \strokec4 (\cf6 \strokec6 busy_intervals\cf4 \strokec4 , \cf6 \strokec6 daily_start\cf4 \strokec4 , \cf6 \strokec6 daily_end\cf4 \strokec4 ):\
    free_intervals \cf7 \strokec7 =\cf4 \strokec4  []                                                 \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
    last_end \cf7 \strokec7 =\cf4 \strokec4  daily_start                                              \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
    \cf11 \strokec11 for\cf4 \strokec4  start, end \cf11 \strokec11 in\cf4 \strokec4  busy_intervals:                                   \cf7 \strokec7 //\cf4 \strokec4 O(n) n \cf2 \strokec2 is\cf4 \strokec4  \cf11 \strokec11 for\cf4 \strokec4  busy interVAL\
        \cf11 \strokec11 if\cf4 \strokec4  last_end \cf7 \strokec7 <\cf4 \strokec4  start:                                            \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
            free_intervals.append([last_end, start])                    \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
        last_end = \cf5 \strokec5 max\cf4 \strokec4 (last_end, end)                                   \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
    \cf11 \strokec11 if\cf4 \strokec4  last_end \cf7 \strokec7 <\cf4 \strokec4  daily_end:                                            \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
        free_intervals.append([last_end, daily_end])                    \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
    \cf11 \strokec11 return\cf4 \strokec4  free_intervals                                               \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
\
\pard\pardeftab720\partightenfactor0
\cf11 \strokec11 def\cf4 \strokec4  find_common_intervals(all_free_intervals, meeting_duration):\
    common_intervals = all_free_intervals[\cf10 \strokec10 0\cf4 \strokec4 ]                            \cf7 \strokec7 //\cf4 \strokec4 O(k) k \cf2 \strokec2 is\cf4 \strokec4  average number of free intervals\
    \cf11 \strokec11 for\cf4 \strokec4  free_intervals \cf11 \strokec11 in\cf4 \strokec4  all_free_intervals[\cf10 \strokec10 1\cf4 \strokec4 :]:                       \cf7 \strokec7 //\cf4 \strokec4 O(p) p \cf2 \strokec2 is\cf4 \strokec4  \cf8 \strokec8 list\cf4 \strokec4  of participants \
        new_common = []                                                 \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
        i = j = \cf10 \strokec10 0\cf4 \strokec4                                                        \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
        \cf11 \strokec11 while\cf4 \strokec4  i \cf7 \strokec7 <\cf4 \strokec4  \cf5 \strokec5 len\cf4 \strokec4 (common_intervals) \cf2 \strokec2 and\cf4 \strokec4  j \cf7 \strokec7 <\cf4 \strokec4  \cf5 \strokec5 len\cf4 \strokec4 (free_intervals):    \cf7 \strokec7 //\cf4 \strokec4 O(k)\
            start = \cf5 \strokec5 max\cf4 \strokec4 (common_intervals[i][\cf10 \strokec10 0\cf4 \strokec4 ], free_intervals[j][\cf10 \strokec10 0\cf4 \strokec4 ])   \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 ) \
            end = \cf5 \strokec5 min\cf4 \strokec4 (common_intervals[i][\cf10 \strokec10 1\cf4 \strokec4 ], free_intervals[j][\cf10 \strokec10 1\cf4 \strokec4 ])     \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
            \cf11 \strokec11 if\cf4 \strokec4  end \cf7 \strokec7 -\cf4 \strokec4  start \cf7 \strokec7 >=\cf4 \strokec4  meeting_duration:                         \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
                new_common.append([start, end])                         \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
            \cf11 \strokec11 if\cf4 \strokec4  common_intervals[i][\cf10 \strokec10 1\cf4 \strokec4 ] \cf7 \strokec7 <\cf4 \strokec4  free_intervals[j][\cf10 \strokec10 1\cf4 \strokec4 ]:           \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
                i \cf7 \strokec7 +\cf4 \strokec4 = \cf10 \strokec10 1\cf4 \strokec4                                                   \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
            \cf11 \strokec11 else\cf4 \strokec4 :\
                j \cf7 \strokec7 +\cf4 \strokec4 = \cf10 \strokec10 1\cf4 \strokec4                                                   \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
        common_intervals = new_common                                   \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
    return [[minutes_to_time(start), minutes_to_time(end)] \cf11 \strokec11 for\cf4 \strokec4  start, end \cf11 \strokec11 in\cf4 \strokec4  common_intervals] \cf7 \strokec7 //\cf4 \strokec4 O(m)\
\
\cf11 \strokec11 def\cf4 \strokec4  group_schedule_match(schedules, working_periods, meeting_duration):\
    all_free_intervals = []                                                         \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
    \cf11 \strokec11 for\cf4 \strokec4  busy_intervals, (login, logout) \cf11 \strokec11 in\cf4 \strokec4  \cf5 \strokec5 zip\cf4 \strokec4 (schedules, working_periods):         \cf7 \strokec7 //\cf4 \strokec4 O(p) p \cf2 \strokec2 is\cf4 \strokec4  the participants\
        busy_intervals = [[time_to_minutes(start), time_to_minutes(end)] \cf11 \strokec11 for\cf4 \strokec4  start, end \cf11 \strokec11 in\cf4 \strokec4  busy_intervals]  \cf7 \strokec7 //\cf4 \strokec4 O(n) n \cf2 \strokec2 is\cf4 \strokec4  the busy intervals\
        daily_start = time_to_minutes(login)                                        \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
        daily_end = time_to_minutes(logout)                                         \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
        free_intervals = calculate_free_intervals(busy_intervals, daily_start, daily_end)                   \cf7 \strokec7 //\cf4 \strokec4 O(n) n \cf2 \strokec2 is\cf4 \strokec4  the busy intervals\
        all_free_intervals.append(free_intervals)                                   \cf7 \strokec7 //\cf4 \strokec4 O(\cf10 \strokec10 1\cf4 \strokec4 )\
    \cf11 \strokec11 return\cf4 \strokec4  find_common_intervals(all_free_intervals, meeting_duration)              \cf7 \strokec7 //\cf4 \strokec4 O(p \cf7 \strokec7 *\cf4 \strokec4  k)  \cf7 \strokec7 //\cf4 \strokec4 overal O(p\cf7 \strokec7 *\cf4 \strokec4 (n\cf7 \strokec7 +\cf4 \strokec4 k))\
\
\cf11 \strokec11 def\cf4 \strokec4  main():\
   \
    \cf11 \strokec11 with\cf4 \strokec4  \cf5 \strokec5 open\cf4 \strokec4 (\cf9 \strokec9 'input.txt'\cf4 \strokec4 , \cf9 \strokec9 'r'\cf4 \strokec4 ) \cf11 \strokec11 as\cf4 \strokec4  infile:\
        \
        num_participants = \cf8 \strokec8 int\cf4 \strokec4 (infile.readline().strip())\
        schedules = []\
        working_periods = []\
        \
       \
        \cf11 \strokec11 for\cf4 \strokec4  _ \cf11 \strokec11 in\cf4 \strokec4  \cf5 \strokec5 range\cf4 \strokec4 (num_participants):\
            \
            daily_login, daily_logout = infile.readline().strip().split()\
            working_periods.append([daily_login, daily_logout])\
            \
            \
            busy_intervals = []\
            num_busy_periods = \cf8 \strokec8 int\cf4 \strokec4 (infile.readline().strip())\
            \
            \cf11 \strokec11 for\cf4 \strokec4  _ \cf11 \strokec11 in\cf4 \strokec4  \cf5 \strokec5 range\cf4 \strokec4 (num_busy_periods):\
                start, end = infile.readline().strip().split()\
                busy_intervals.append([start, end])\
            \
            schedules.append(busy_intervals)\
        \
        \
        meeting_duration = \cf8 \strokec8 int\cf4 \strokec4 (infile.readline().strip())\
    \
   \
    available_slots = group_schedule_match(schedules, working_periods, meeting_duration)\
    \
    \cf11 \strokec11 with\cf4 \strokec4  \cf5 \strokec5 open\cf4 \strokec4 (\cf9 \strokec9 'output.txt'\cf4 \strokec4 , \cf9 \strokec9 'w'\cf4 \strokec4 ) \cf11 \strokec11 as\cf4 \strokec4  outfile:\
        \cf11 \strokec11 if\cf4 \strokec4  available_slots:\
            outfile.write(\cf9 \strokec9 "Available meeting times:\cf12 \strokec12 \\n\cf9 \strokec9 "\cf4 \strokec4 )\
            \cf11 \strokec11 for\cf4 \strokec4  start, end \cf11 \strokec11 in\cf4 \strokec4  available_slots:\
                outfile.write(\cf2 \strokec2 f\cf9 \strokec9 "\cf2 \strokec2 \{\cf4 \strokec4 start\cf2 \strokec2 \}\cf9 \strokec9  - \cf2 \strokec2 \{\cf4 \strokec4 end\cf2 \strokec2 \}\cf12 \strokec12 \\n\cf9 \strokec9 "\cf4 \strokec4 )\
        \cf11 \strokec11 else\cf4 \strokec4 :\
            outfile.write(\cf9 \strokec9 "No common available times meet the required duration.\cf12 \strokec12 \\n\cf9 \strokec9 "\cf4 \strokec4 )\
\
\cf11 \strokec11 if\cf4 \strokec4  \cf6 \strokec6 __name__\cf4 \strokec4  \cf7 \strokec7 ==\cf4 \strokec4  \cf9 \strokec9 "__main__"\cf4 \strokec4 :\
    main()\
\pard\pardeftab720\partightenfactor0
\cf13 \strokec13 \
\
OVERALL COMPLEXITY:  \cf7 \strokec7 //\cf4 \strokec4 overall O(p\cf7 \strokec7 *\cf4 \strokec4 (n\cf7 \strokec7 +\cf13 \strokec13 k))\
\
}